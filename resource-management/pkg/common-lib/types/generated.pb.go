/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: k8s.io/kubernetes/vendor/k8s.io/api/global-resource-service/resource-management/pkg/common-lib/types/generated.proto

package types

import (
	fmt "fmt"

	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *LogicalNode) Reset()      { *m = LogicalNode{} }
func (*LogicalNode) ProtoMessage() {}
func (*LogicalNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e6ff26d2a95106f, []int{0}
}
func (m *LogicalNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogicalNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LogicalNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalNode.Merge(m, src)
}
func (m *LogicalNode) XXX_Size() int {
	return m.Size()
}
func (m *LogicalNode) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalNode.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalNode proto.InternalMessageInfo

func (m *NodeEvent) Reset()      { *m = NodeEvent{} }
func (*NodeEvent) ProtoMessage() {}
func (*NodeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e6ff26d2a95106f, []int{1}
}
func (m *NodeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeEvent.Merge(m, src)
}
func (m *NodeEvent) XXX_Size() int {
	return m.Size()
}
func (m *NodeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_NodeEvent proto.InternalMessageInfo

func (m *NodeGeoInfo) Reset()      { *m = NodeGeoInfo{} }
func (*NodeGeoInfo) ProtoMessage() {}
func (*NodeGeoInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e6ff26d2a95106f, []int{2}
}
func (m *NodeGeoInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeGeoInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeGeoInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeGeoInfo.Merge(m, src)
}
func (m *NodeGeoInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeGeoInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeGeoInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeGeoInfo proto.InternalMessageInfo

func (m *NodeResource) Reset()      { *m = NodeResource{} }
func (*NodeResource) ProtoMessage() {}
func (*NodeResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e6ff26d2a95106f, []int{3}
}
func (m *NodeResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeResource.Merge(m, src)
}
func (m *NodeResource) XXX_Size() int {
	return m.Size()
}
func (m *NodeResource) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeResource.DiscardUnknown(m)
}

var xxx_messageInfo_NodeResource proto.InternalMessageInfo

func (m *NodeSpecialHardWareTypeInfo) Reset()      { *m = NodeSpecialHardWareTypeInfo{} }
func (*NodeSpecialHardWareTypeInfo) ProtoMessage() {}
func (*NodeSpecialHardWareTypeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e6ff26d2a95106f, []int{4}
}
func (m *NodeSpecialHardWareTypeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSpecialHardWareTypeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeSpecialHardWareTypeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSpecialHardWareTypeInfo.Merge(m, src)
}
func (m *NodeSpecialHardWareTypeInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeSpecialHardWareTypeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSpecialHardWareTypeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSpecialHardWareTypeInfo proto.InternalMessageInfo

func (m *NodeTaints) Reset()      { *m = NodeTaints{} }
func (*NodeTaints) ProtoMessage() {}
func (*NodeTaints) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e6ff26d2a95106f, []int{5}
}
func (m *NodeTaints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeTaints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeTaints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeTaints.Merge(m, src)
}
func (m *NodeTaints) XXX_Size() int {
	return m.Size()
}
func (m *NodeTaints) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeTaints.DiscardUnknown(m)
}

var xxx_messageInfo_NodeTaints proto.InternalMessageInfo

func (m *ResponseFromRRM) Reset()      { *m = ResponseFromRRM{} }
func (*ResponseFromRRM) ProtoMessage() {}
func (*ResponseFromRRM) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e6ff26d2a95106f, []int{6}
}
func (m *ResponseFromRRM) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseFromRRM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ResponseFromRRM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseFromRRM.Merge(m, src)
}
func (m *ResponseFromRRM) XXX_Size() int {
	return m.Size()
}
func (m *ResponseFromRRM) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseFromRRM.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseFromRRM proto.InternalMessageInfo

func (m *RpNodeEvents) Reset()      { *m = RpNodeEvents{} }
func (*RpNodeEvents) ProtoMessage() {}
func (*RpNodeEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e6ff26d2a95106f, []int{7}
}
func (m *RpNodeEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpNodeEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RpNodeEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpNodeEvents.Merge(m, src)
}
func (m *RpNodeEvents) XXX_Size() int {
	return m.Size()
}
func (m *RpNodeEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_RpNodeEvents.DiscardUnknown(m)
}

var xxx_messageInfo_RpNodeEvents proto.InternalMessageInfo

func (m *Time) Reset()      { *m = Time{} }
func (*Time) ProtoMessage() {}
func (*Time) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e6ff26d2a95106f, []int{8}
}
func (m *Time) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Time.Unmarshal(m, b)
}
func (m *Time) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Time.Marshal(b, m, deterministic)
}
func (m *Time) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Time.Merge(m, src)
}
func (m *Time) XXX_Size() int {
	return xxx_messageInfo_Time.Size(m)
}
func (m *Time) XXX_DiscardUnknown() {
	xxx_messageInfo_Time.DiscardUnknown(m)
}

var xxx_messageInfo_Time proto.InternalMessageInfo

func (m *Timestamp) Reset()      { *m = Timestamp{} }
func (*Timestamp) ProtoMessage() {}
func (*Timestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e6ff26d2a95106f, []int{9}
}
func (m *Timestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Timestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Timestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamp.Merge(m, src)
}
func (m *Timestamp) XXX_Size() int {
	return m.Size()
}
func (m *Timestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamp.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LogicalNode)(nil), "k8s.io.api.global_resource_service.resource_management.pkg.common_lib.types.LogicalNode")
	proto.RegisterType((*NodeEvent)(nil), "k8s.io.api.global_resource_service.resource_management.pkg.common_lib.types.NodeEvent")
	proto.RegisterType((*NodeGeoInfo)(nil), "k8s.io.api.global_resource_service.resource_management.pkg.common_lib.types.NodeGeoInfo")
	proto.RegisterType((*NodeResource)(nil), "k8s.io.api.global_resource_service.resource_management.pkg.common_lib.types.NodeResource")
	proto.RegisterMapType((map[ResourceName]int64)(nil), "k8s.io.api.global_resource_service.resource_management.pkg.common_lib.types.NodeResource.ScalarResourcesEntry")
	proto.RegisterType((*NodeSpecialHardWareTypeInfo)(nil), "k8s.io.api.global_resource_service.resource_management.pkg.common_lib.types.NodeSpecialHardWareTypeInfo")
	proto.RegisterType((*NodeTaints)(nil), "k8s.io.api.global_resource_service.resource_management.pkg.common_lib.types.NodeTaints")
	proto.RegisterType((*ResponseFromRRM)(nil), "k8s.io.api.global_resource_service.resource_management.pkg.common_lib.types.ResponseFromRRM")
	proto.RegisterType((*RpNodeEvents)(nil), "k8s.io.api.global_resource_service.resource_management.pkg.common_lib.types.RpNodeEvents")
	proto.RegisterType((*Time)(nil), "k8s.io.api.global_resource_service.resource_management.pkg.common_lib.types.Time")
	proto.RegisterType((*Timestamp)(nil), "k8s.io.api.global_resource_service.resource_management.pkg.common_lib.types.Timestamp")
}

func init() {
	proto.RegisterFile("k8s.io/kubernetes/vendor/k8s.io/api/global-resource-service/resource-management/pkg/common-lib/types/generated.proto", fileDescriptor_0e6ff26d2a95106f)
}

var fileDescriptor_0e6ff26d2a95106f = []byte{
	// 1317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0xda, 0x71, 0x62, 0x8f, 0xf3, 0xad, 0x9d, 0xa9, 0xbf, 0xdf, 0xaf, 0x49, 0x91, 0x1d,
	0x19, 0x54, 0x52, 0x20, 0xeb, 0x36, 0x54, 0xa8, 0xea, 0x89, 0x6c, 0x9a, 0xb4, 0x15, 0x4d, 0x14,
	0x4d, 0xfa, 0x03, 0xca, 0x61, 0x35, 0xde, 0x9d, 0xac, 0x57, 0xd9, 0x9d, 0x59, 0xcd, 0x8c, 0x5d,
	0xdc, 0x0b, 0x15, 0x42, 0x82, 0x63, 0x8f, 0x3d, 0x36, 0x47, 0x2e, 0x5c, 0xb9, 0x70, 0xe2, 0xd4,
	0x63, 0x8f, 0x3d, 0x40, 0xa0, 0xe1, 0xbf, 0x88, 0x04, 0x42, 0x33, 0x3b, 0x5e, 0xbb, 0x6e, 0xc5,
	0xc9, 0xdc, 0x66, 0x3e, 0x9f, 0x37, 0xef, 0x7d, 0xf6, 0xcd, 0x7b, 0x6f, 0x16, 0xc8, 0xc3, 0x2b,
	0xc2, 0x0e, 0x59, 0xe7, 0xb0, 0xdf, 0x25, 0x9c, 0x12, 0x49, 0x44, 0x67, 0x40, 0xa8, 0xcf, 0x78,
	0xc7, 0x10, 0x38, 0x09, 0x3b, 0x41, 0xc4, 0xba, 0x38, 0x5a, 0xe3, 0x44, 0xb0, 0x3e, 0xf7, 0xc8,
	0x9a, 0x20, 0x7c, 0x10, 0x7a, 0xa4, 0x93, 0x01, 0x31, 0xa6, 0x38, 0x20, 0x31, 0xa1, 0xb2, 0x93,
	0x1c, 0x06, 0x1d, 0x8f, 0xc5, 0x31, 0xa3, 0x6b, 0x51, 0xd8, 0xed, 0xc8, 0x61, 0x42, 0x44, 0x27,
	0x20, 0x94, 0x70, 0x2c, 0x89, 0x6f, 0x27, 0x9c, 0x49, 0x06, 0x3f, 0x4d, 0x9d, 0xdb, 0x38, 0x09,
	0xed, 0xd4, 0xb9, 0x3b, 0xf2, 0xe5, 0x1a, 0xe7, 0x76, 0x06, 0x8c, 0x9d, 0xdb, 0xc9, 0x61, 0x60,
	0xa7, 0xce, 0xdd, 0x28, 0xec, 0xda, 0xda, 0xf9, 0xf2, 0x5a, 0x10, 0xca, 0x5e, 0xbf, 0xab, 0x88,
	0x4e, 0xc0, 0x02, 0xd6, 0xd1, 0x31, 0xba, 0xfd, 0x03, 0xbd, 0xd3, 0x1b, 0xbd, 0x4a, 0x63, 0x2f,
	0x5f, 0x1e, 0x7f, 0x58, 0x8c, 0xbd, 0x5e, 0x48, 0x09, 0x1f, 0x6a, 0xd5, 0x38, 0x09, 0x45, 0x27,
	0x26, 0x12, 0x77, 0x06, 0x97, 0xa6, 0x15, 0xb7, 0xff, 0x5a, 0x00, 0x95, 0x5b, 0x2c, 0x08, 0x3d,
	0x1c, 0xed, 0x32, 0x9f, 0xc0, 0x65, 0x90, 0x0f, 0xfd, 0x86, 0xb5, 0x62, 0xad, 0x96, 0x1d, 0xf0,
	0xec, 0xb8, 0x95, 0x3b, 0x39, 0x6e, 0xe5, 0x6f, 0xfa, 0x28, 0x1f, 0xfa, 0xd0, 0x01, 0xb5, 0x4c,
	0xfc, 0x80, 0x70, 0x11, 0x32, 0xda, 0xc8, 0x6b, 0xcb, 0xff, 0x1b, 0xcb, 0x2a, 0x32, 0xfc, 0xdd,
	0x94, 0x46, 0x55, 0xfe, 0x2a, 0x00, 0xbf, 0xb1, 0x40, 0x29, 0x20, 0xcc, 0x0d, 0xe9, 0x01, 0x6b,
	0x14, 0x56, 0xac, 0xd5, 0xca, 0xfa, 0x67, 0xf6, 0x0c, 0xb3, 0x66, 0xab, 0xaf, 0xb8, 0x4e, 0xd8,
	0x4d, 0x7a, 0xc0, 0x9c, 0xaa, 0x91, 0xb5, 0x60, 0x00, 0xb4, 0x10, 0xa4, 0x0b, 0xf8, 0x15, 0x98,
	0x97, 0x38, 0xa4, 0x52, 0x34, 0xe6, 0xb4, 0x86, 0x7b, 0x33, 0xd7, 0x70, 0x5b, 0xbb, 0x77, 0xce,
	0x18, 0x09, 0xf3, 0xe9, 0x1e, 0x99, 0xb0, 0xf0, 0x27, 0x0b, 0xfc, 0x4f, 0x24, 0xc4, 0x0b, 0x71,
	0xe4, 0xf6, 0x30, 0xf7, 0x1f, 0x60, 0x4e, 0x5c, 0x7d, 0xba, 0x51, 0xd4, 0x8a, 0x7a, 0x33, 0x57,
	0xb4, 0x9f, 0x86, 0xbb, 0x81, 0xb9, 0x7f, 0x0f, 0x73, 0x72, 0x7b, 0x98, 0x10, 0x9d, 0xa5, 0xb7,
	0x8d, 0xc4, 0xfa, 0x84, 0xc1, 0x03, 0x63, 0x20, 0x50, 0x5d, 0xbc, 0x01, 0x85, 0xdf, 0x5b, 0xa0,
	0x8e, 0xa3, 0x88, 0x79, 0x58, 0xe2, 0x6e, 0x44, 0x32, 0x65, 0x8d, 0x79, 0x2d, 0xfe, 0xf3, 0x99,
	0x8b, 0x1f, 0x15, 0x96, 0x73, 0xce, 0xa8, 0x3d, 0xbb, 0x31, 0x0e, 0x3f, 0x22, 0xd1, 0x59, 0xfc,
	0x3a, 0x08, 0xd7, 0x01, 0xf0, 0x18, 0xf5, 0x43, 0x19, 0x32, 0x2a, 0x1a, 0x0b, 0x2b, 0xd6, 0x6a,
	0xd1, 0x81, 0xc6, 0x0b, 0xd8, 0xcc, 0x18, 0x34, 0x61, 0x05, 0x3f, 0x04, 0x25, 0x4e, 0x94, 0x50,
	0xe2, 0x37, 0x4a, 0x2b, 0xd6, 0x6a, 0xc9, 0xa9, 0x99, 0x13, 0x25, 0x64, 0x70, 0x94, 0x59, 0xc0,
	0x9b, 0x60, 0xd1, 0xb4, 0x9c, 0xbe, 0xc2, 0x46, 0x59, 0x37, 0xc5, 0x79, 0x73, 0xa2, 0xb2, 0x93,
	0x72, 0x2a, 0x73, 0xa7, 0xc7, 0xad, 0xaa, 0xfa, 0x9c, 0x09, 0x08, 0x55, 0xe2, 0xf1, 0x06, 0x32,
	0xb0, 0x14, 0x61, 0x21, 0xdd, 0x7e, 0xe2, 0xab, 0x2e, 0x75, 0x65, 0x18, 0x93, 0x06, 0xd0, 0x49,
	0x7d, 0x7f, 0x22, 0xa9, 0x59, 0x87, 0xeb, 0x8c, 0xa9, 0x0e, 0xb7, 0x55, 0x87, 0xdb, 0x83, 0x4b,
	0xf6, 0xed, 0x30, 0x26, 0xe3, 0x86, 0xbc, 0x85, 0x85, 0xbc, 0x93, 0xfa, 0x52, 0x04, 0xaa, 0x46,
	0xaf, 0x02, 0xed, 0x1f, 0x2c, 0x50, 0x56, 0x8a, 0xb6, 0x06, 0x84, 0x4a, 0x78, 0x61, 0xa2, 0xfd,
	0xdf, 0x32, 0x3e, 0xe6, 0x8c, 0xf0, 0xb2, 0x36, 0xd1, 0x92, 0xd5, 0x34, 0x18, 0x80, 0x39, 0xca,
	0x7c, 0xa2, 0x27, 0xc0, 0xac, 0x9b, 0x78, 0x62, 0x22, 0x39, 0x25, 0x25, 0x41, 0x97, 0x80, 0x8e,
	0xd7, 0xfe, 0x31, 0x0f, 0x2a, 0x13, 0x4d, 0x0e, 0x2f, 0x83, 0x79, 0x4e, 0x02, 0x35, 0x8b, 0x94,
	0xec, 0x42, 0x56, 0xce, 0xf3, 0x48, 0xa3, 0xa7, 0xc7, 0x2d, 0x90, 0xae, 0x76, 0x71, 0x4c, 0x90,
	0xb1, 0x85, 0x0e, 0xc8, 0xf3, 0x44, 0x6b, 0x2f, 0x38, 0xeb, 0xe6, 0xc4, 0xd2, 0xa8, 0x64, 0xf6,
	0x30, 0x97, 0xba, 0x10, 0x4e, 0x8f, 0x5b, 0xff, 0x7d, 0x0d, 0xd4, 0x7e, 0xf2, 0x3c, 0x81, 0x97,
	0x41, 0xde, 0xf7, 0xf4, 0x10, 0x2b, 0x3b, 0xef, 0x8e, 0x0a, 0xea, 0x1a, 0x96, 0x78, 0x93, 0x50,
	0x49, 0xf8, 0xe9, 0x71, 0xeb, 0xcc, 0x78, 0x97, 0x9e, 0xf2, 0x3d, 0xf8, 0x09, 0xc8, 0xe3, 0x87,
	0x7a, 0xec, 0x94, 0x9d, 0x8b, 0xe6, 0x54, 0x6d, 0x63, 0x80, 0xc3, 0x08, 0x77, 0xc3, 0x28, 0x94,
	0xc3, 0xfb, 0x8c, 0xaa, 0x74, 0xd7, 0xa7, 0xb1, 0xd4, 0x03, 0x7e, 0x08, 0x3f, 0x06, 0xf9, 0x03,
	0x5f, 0x8f, 0x89, 0x89, 0x22, 0xdb, 0xc6, 0xfd, 0x48, 0x5e, 0x63, 0x31, 0x0e, 0x95, 0xea, 0xea,
	0xc4, 0x36, 0x3d, 0x77, 0xe0, 0xb7, 0xff, 0x2c, 0x80, 0xc5, 0xc9, 0x5e, 0x82, 0x6b, 0xa0, 0x1c,
	0x87, 0x51, 0x14, 0xba, 0x5e, 0xd2, 0x37, 0xd9, 0xcb, 0xca, 0x7c, 0x47, 0x11, 0x9b, 0x7b, 0x77,
	0x50, 0x49, 0x9b, 0x6c, 0x26, 0x7d, 0x78, 0x1e, 0xcc, 0xc7, 0x24, 0x66, 0x7c, 0x68, 0xf2, 0x96,
	0xcd, 0xb6, 0x1d, 0x8d, 0x22, 0xc3, 0xc2, 0x2d, 0xb0, 0x44, 0x92, 0x1e, 0x89, 0x09, 0xc7, 0x91,
	0x2b, 0x24, 0xe3, 0x38, 0x20, 0x3a, 0x4d, 0x05, 0xa7, 0x31, 0xfa, 0xe0, 0xad, 0x91, 0xc1, 0x7e,
	0xca, 0xa3, 0x1a, 0x99, 0x42, 0xe0, 0x36, 0x80, 0xaa, 0x9d, 0x1f, 0x10, 0xdf, 0x4d, 0x98, 0xef,
	0xd2, 0x7e, 0xdc, 0x25, 0x5c, 0x27, 0xae, 0x38, 0xf6, 0xb3, 0x91, 0x5a, 0xec, 0x31, 0x7f, 0x57,
	0xf3, 0xa8, 0x86, 0xa7, 0x10, 0xf8, 0xb3, 0x05, 0x6a, 0xc2, 0xc3, 0x11, 0xe6, 0x59, 0x45, 0xaa,
	0x21, 0x5b, 0x58, 0xad, 0xac, 0xd3, 0x7f, 0x6d, 0x4e, 0xd9, 0xfb, 0x3a, 0xe2, 0x68, 0x2b, 0xb6,
	0xa8, 0xe4, 0x43, 0xe7, 0xbd, 0x51, 0x5b, 0x4e, 0xb1, 0x5f, 0xff, 0xd6, 0x5a, 0x1c, 0x6d, 0xf4,
	0x75, 0x55, 0xc5, 0xab, 0x06, 0xcb, 0x0e, 0xa8, 0xbf, 0xc9, 0x23, 0xac, 0x81, 0xc2, 0x21, 0x19,
	0xa6, 0x1d, 0x8b, 0xd4, 0x12, 0xd6, 0x41, 0x71, 0x80, 0xa3, 0x7e, 0xda, 0x98, 0x05, 0x94, 0x6e,
	0xae, 0xe6, 0xaf, 0x58, 0xed, 0x04, 0x9c, 0xfb, 0x87, 0x77, 0x40, 0x5d, 0x6f, 0x0f, 0x8b, 0xc0,
	0x94, 0x42, 0x69, 0x7c, 0xbd, 0x37, 0xb0, 0xb8, 0x9e, 0xf4, 0x91, 0x61, 0xe1, 0x05, 0xb0, 0xd0,
	0xc3, 0xe2, 0x20, 0x09, 0xb0, 0x0e, 0x51, 0x1a, 0x3f, 0xb3, 0x37, 0xb0, 0xd8, 0xde, 0xbb, 0xbe,
	0x81, 0x46, 0x7c, 0x5b, 0x00, 0x30, 0x7e, 0x0b, 0xe1, 0x47, 0xa0, 0x42, 0x99, 0x2b, 0xbc, 0x1e,
	0xf1, 0xfb, 0x11, 0x31, 0x51, 0xb2, 0x49, 0xbc, 0xcb, 0xf6, 0x0d, 0x83, 0x00, 0xcd, 0xd6, 0xf0,
	0x22, 0x00, 0x94, 0xb9, 0xe4, 0x4b, 0xe2, 0xf5, 0x25, 0x31, 0x01, 0x97, 0xcc, 0x99, 0xf2, 0x2e,
	0xdb, 0x4a, 0x09, 0x54, 0xa6, 0xa3, 0x65, 0xfb, 0x57, 0x0b, 0xa8, 0xff, 0x90, 0x84, 0x51, 0x41,
	0xb6, 0x39, 0x8b, 0x11, 0xda, 0x81, 0x47, 0x16, 0x80, 0x69, 0xe7, 0xbb, 0x6a, 0x88, 0xb8, 0x44,
	0x8d, 0x32, 0xd1, 0xb0, 0x74, 0x15, 0xcc, 0xf6, 0xb5, 0x42, 0x49, 0x36, 0x4e, 0xc5, 0xb8, 0x4e,
	0xcd, 0x08, 0xca, 0x18, 0x54, 0xe3, 0x53, 0x88, 0xca, 0x7f, 0x44, 0x68, 0x20, 0x7b, 0xba, 0x57,
	0xe6, 0xc6, 0xf9, 0xbf, 0xa5, 0x51, 0x64, 0xd8, 0xf6, 0x13, 0x0b, 0x2c, 0x4e, 0x06, 0x81, 0xdf,
	0x5a, 0x2a, 0xb1, 0xd3, 0x5f, 0x75, 0x77, 0xe6, 0xb5, 0xad, 0xc3, 0x39, 0x67, 0xd2, 0xcb, 0xca,
	0x3e, 0x04, 0xd0, 0x6c, 0xdd, 0x8e, 0xc0, 0x9c, 0x7a, 0x54, 0x54, 0x89, 0x08, 0xa2, 0x9e, 0x53,
	0x61, 0xc6, 0x4a, 0x56, 0x22, 0xfb, 0x29, 0x8c, 0x46, 0x3c, 0x7c, 0x07, 0x14, 0x29, 0xa6, 0x4c,
	0xe8, 0xab, 0x2d, 0x3a, 0xff, 0x31, 0x86, 0xc5, 0x5d, 0x05, 0xa2, 0x94, 0xbb, 0x5a, 0x7f, 0xf2,
	0xb4, 0x95, 0xfb, 0xee, 0xa8, 0x95, 0x7b, 0x7c, 0xd4, 0xca, 0x3d, 0x3d, 0x6a, 0xe5, 0x1e, 0xfd,
	0xb2, 0x92, 0x6b, 0x7f, 0x01, 0xca, 0x2a, 0x9a, 0x90, 0x38, 0x4e, 0x66, 0x1d, 0xd2, 0xf9, 0xe0,
	0xd9, 0xcb, 0x66, 0xee, 0xf9, 0xcb, 0x66, 0xee, 0xc5, 0xcb, 0x66, 0xee, 0xd1, 0x49, 0xd3, 0x7a,
	0x76, 0xd2, 0xb4, 0x9e, 0x9f, 0x34, 0xad, 0x17, 0x27, 0x4d, 0xeb, 0xf7, 0x93, 0xa6, 0xf5, 0xf8,
	0x8f, 0x66, 0xee, 0x7e, 0x51, 0x67, 0xe7, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x4e, 0x6e,
	0xcd, 0x6e, 0x0c, 0x00, 0x00,
}

func (m *LogicalNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicalNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogicalNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LastUpdatedTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	i -= len(m.MachineType)
	copy(dAtA[i:], m.MachineType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MachineType)))
	i--
	dAtA[i] = 0x4a
	i--
	if m.Reserved {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x40
	i = encodeVarintGenerated(dAtA, i, uint64(m.Conditions))
	i--
	dAtA[i] = 0x38
	{
		size, err := m.AllocatableResource.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.SpecialHardwareTypes.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Taints.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.GeoInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	i -= len(m.ResourceVersion)
	copy(dAtA[i:], m.ResourceVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ResourceVersion)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Id)
	copy(dAtA[i:], m.Id)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Id)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeGeoInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeGeoInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeGeoInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.FaultDomain)
	copy(dAtA[i:], m.FaultDomain)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FaultDomain)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.AvailabilityZone)
	copy(dAtA[i:], m.AvailabilityZone)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AvailabilityZone)))
	i--
	dAtA[i] = 0x22
	i -= len(m.DataCenter)
	copy(dAtA[i:], m.DataCenter)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DataCenter)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintGenerated(dAtA, i, uint64(m.ResourcePartition))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.Region))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodeResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScalarResources) > 0 {
		keysForScalarResources := make([]string, 0, len(m.ScalarResources))
		for k := range m.ScalarResources {
			keysForScalarResources = append(keysForScalarResources, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForScalarResources)
		for iNdEx := len(keysForScalarResources) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ScalarResources[ResourceName(keysForScalarResources[iNdEx])]
			baseI := i
			i = encodeVarintGenerated(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(keysForScalarResources[iNdEx])
			copy(dAtA[i:], keysForScalarResources[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForScalarResources[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.AllowedPodNumber))
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.EphemeralStorage))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.Memory))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.MilliCPU))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodeSpecialHardWareTypeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSpecialHardWareTypeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeSpecialHardWareTypeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.HasFPGA {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i--
	if m.HasGpu {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *NodeTaints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeTaints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeTaints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.NoExecute {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i--
	if m.NoSchedule {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ResponseFromRRM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseFromRRM) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseFromRRM) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Length))
	i--
	dAtA[i] = 0x18
	if len(m.RegionNodeEvents) > 0 {
		for iNdEx := len(m.RegionNodeEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegionNodeEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RpNodeEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpNodeEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpNodeEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeEvents) > 0 {
		for iNdEx := len(m.NodeEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Timestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Timestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Nanos))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.Seconds))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogicalNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ResourceVersion)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.GeoInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Taints.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.SpecialHardwareTypes.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.AllocatableResource.Size()
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Conditions))
	n += 2
	l = len(m.MachineType)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.LastUpdatedTime.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *NodeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *NodeGeoInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Region))
	n += 1 + sovGenerated(uint64(m.ResourcePartition))
	l = len(m.DataCenter)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AvailabilityZone)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.FaultDomain)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *NodeResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.MilliCPU))
	n += 1 + sovGenerated(uint64(m.Memory))
	n += 1 + sovGenerated(uint64(m.EphemeralStorage))
	n += 1 + sovGenerated(uint64(m.AllowedPodNumber))
	if len(m.ScalarResources) > 0 {
		for k, v := range m.ScalarResources {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + sovGenerated(uint64(v))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NodeSpecialHardWareTypeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 2
	return n
}

func (m *NodeTaints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 2
	return n
}

func (m *ResponseFromRRM) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegionNodeEvents) > 0 {
		for _, e := range m.RegionNodeEvents {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 1 + sovGenerated(uint64(m.Length))
	return n
}

func (m *RpNodeEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeEvents) > 0 {
		for _, e := range m.NodeEvents {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *Timestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Seconds))
	n += 1 + sovGenerated(uint64(m.Nanos))
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LogicalNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogicalNode{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`GeoInfo:` + strings.Replace(strings.Replace(this.GeoInfo.String(), "NodeGeoInfo", "NodeGeoInfo", 1), `&`, ``, 1) + `,`,
		`Taints:` + strings.Replace(strings.Replace(this.Taints.String(), "NodeTaints", "NodeTaints", 1), `&`, ``, 1) + `,`,
		`SpecialHardwareTypes:` + strings.Replace(strings.Replace(this.SpecialHardwareTypes.String(), "NodeSpecialHardWareTypeInfo", "NodeSpecialHardWareTypeInfo", 1), `&`, ``, 1) + `,`,
		`AllocatableResource:` + strings.Replace(strings.Replace(this.AllocatableResource.String(), "NodeResource", "NodeResource", 1), `&`, ``, 1) + `,`,
		`Conditions:` + fmt.Sprintf("%v", this.Conditions) + `,`,
		`Reserved:` + fmt.Sprintf("%v", this.Reserved) + `,`,
		`MachineType:` + fmt.Sprintf("%v", this.MachineType) + `,`,
		`LastUpdatedTime:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.LastUpdatedTime), "Time", "v1.Time", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeEvent{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Node:` + strings.Replace(this.Node.String(), "LogicalNode", "LogicalNode", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeGeoInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeGeoInfo{`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`ResourcePartition:` + fmt.Sprintf("%v", this.ResourcePartition) + `,`,
		`DataCenter:` + fmt.Sprintf("%v", this.DataCenter) + `,`,
		`AvailabilityZone:` + fmt.Sprintf("%v", this.AvailabilityZone) + `,`,
		`FaultDomain:` + fmt.Sprintf("%v", this.FaultDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeResource) String() string {
	if this == nil {
		return "nil"
	}
	keysForScalarResources := make([]string, 0, len(this.ScalarResources))
	for k := range this.ScalarResources {
		keysForScalarResources = append(keysForScalarResources, string(k))
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForScalarResources)
	mapStringForScalarResources := "map[ResourceName]int64{"
	for _, k := range keysForScalarResources {
		mapStringForScalarResources += fmt.Sprintf("%v: %v,", k, this.ScalarResources[ResourceName(k)])
	}
	mapStringForScalarResources += "}"
	s := strings.Join([]string{`&NodeResource{`,
		`MilliCPU:` + fmt.Sprintf("%v", this.MilliCPU) + `,`,
		`Memory:` + fmt.Sprintf("%v", this.Memory) + `,`,
		`EphemeralStorage:` + fmt.Sprintf("%v", this.EphemeralStorage) + `,`,
		`AllowedPodNumber:` + fmt.Sprintf("%v", this.AllowedPodNumber) + `,`,
		`ScalarResources:` + mapStringForScalarResources + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeSpecialHardWareTypeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeSpecialHardWareTypeInfo{`,
		`HasGpu:` + fmt.Sprintf("%v", this.HasGpu) + `,`,
		`HasFPGA:` + fmt.Sprintf("%v", this.HasFPGA) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeTaints) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeTaints{`,
		`NoSchedule:` + fmt.Sprintf("%v", this.NoSchedule) + `,`,
		`NoExecute:` + fmt.Sprintf("%v", this.NoExecute) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseFromRRM) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRegionNodeEvents := "[]RpNodeEvents{"
	for _, f := range this.RegionNodeEvents {
		repeatedStringForRegionNodeEvents += strings.Replace(strings.Replace(f.String(), "RpNodeEvents", "RpNodeEvents", 1), `&`, ``, 1) + ","
	}
	repeatedStringForRegionNodeEvents += "}"
	s := strings.Join([]string{`&ResponseFromRRM{`,
		`RegionNodeEvents:` + repeatedStringForRegionNodeEvents + `,`,
		`Length:` + fmt.Sprintf("%v", this.Length) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RpNodeEvents) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodeEvents := "[]*NodeEvent{"
	for _, f := range this.NodeEvents {
		repeatedStringForNodeEvents += strings.Replace(f.String(), "NodeEvent", "NodeEvent", 1) + ","
	}
	repeatedStringForNodeEvents += "}"
	s := strings.Join([]string{`&RpNodeEvents{`,
		`NodeEvents:` + repeatedStringForNodeEvents + `,`,
		`}`,
	}, "")
	return s
}
func (this *Timestamp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Timestamp{`,
		`Seconds:` + fmt.Sprintf("%v", this.Seconds) + `,`,
		`Nanos:` + fmt.Sprintf("%v", this.Nanos) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LogicalNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicalNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicalNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GeoInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Taints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialHardwareTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecialHardwareTypes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatableResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AllocatableResource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			m.Conditions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Conditions |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reserved = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineType = NodeMachineType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastUpdatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = EventType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &LogicalNode{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeGeoInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeGeoInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeGeoInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			m.Region = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Region |= RegionName(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourcePartition", wireType)
			}
			m.ResourcePartition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourcePartition |= ResourcePartitionName(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataCenter = DataCenterName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityZone = AvailabilityZoneName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaultDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaultDomain = FaultDomainName(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MilliCPU", wireType)
			}
			m.MilliCPU = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MilliCPU |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EphemeralStorage", wireType)
			}
			m.EphemeralStorage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EphemeralStorage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedPodNumber", wireType)
			}
			m.AllowedPodNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowedPodNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScalarResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScalarResources == nil {
				m.ScalarResources = make(map[ResourceName]int64)
			}
			var mapkey ResourceName
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = ResourceName(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ScalarResources[ResourceName(mapkey)] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSpecialHardWareTypeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSpecialHardWareTypeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSpecialHardWareTypeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasGpu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasGpu = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasFPGA", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasFPGA = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeTaints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeTaints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeTaints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSchedule", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoSchedule = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoExecute", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoExecute = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseFromRRM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseFromRRM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseFromRRM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionNodeEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionNodeEvents = append(m.RegionNodeEvents, RpNodeEvents{})
			if err := m.RegionNodeEvents[len(m.RegionNodeEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpNodeEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpNodeEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpNodeEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeEvents = append(m.NodeEvents, &NodeEvent{})
			if err := m.NodeEvents[len(m.NodeEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Timestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nanos", wireType)
			}
			m.Nanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nanos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
